@page "/expenses/{id:guid}"

@inject ExpensesService Service
@inject IJSRuntime Js

@inject IStringLocalizer<Resources.Pages.NewExpense> Localizer
@inject IStringLocalizer<Resources.Shared> SharedLocalizer

@attribute [Authorize]

<PageTitle>Expense detail</PageTitle>

<PageLayout Title="ExpenseDetails">
    <Toolbar>
        <a class="btn btn-outline-primary" href="expenses">
            <span class="oi oi-caret-right"></span>
        </a>
    </Toolbar>
    <Content>
        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="row">
                <div class="alert alert-danger">@errorMessage</div>
            </div>
        }

        <ExpenseForm Model="model"
                     OnSave="EditExpense"
                     OnCancel="Cancel" />
    </Content>
</PageLayout>

@code {
    [Parameter]
    [EditorRequired]
    public Guid Id { get; set; }

    private ExpenseModel model = new();

    private string errorMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        model = await Service.GetExpenseDetailsAsync(Id);
    }

    async Task EditExpense(ExpenseModel expense)
    {
        try
        {
            await Service.UpdateExpenseAsync(Id, expense);
            await Js.InvokeVoidAsync("alert", $"La spesa {expense.Title} è stata modificata con successo!");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    void Cancel() => model = new();
}
