@page "/expenses"

@inject ExpensesService Service
@inject IStringLocalizer<Resources.Pages.Expenses> Localizer
@inject IJSRuntime Js
@inject NavigationManager Navigation

@attribute [Authorize]

<PageTitle>@Localizer[nameof(Resources.Pages.Expenses.ExpensesPageTitle)]</PageTitle>

<PageLayout Title="@Localizer[nameof(Resources.Pages.Expenses.ExpensesPageTitle)]">
    <Toolbar>
        <a class="btn btn-outline-primary" href="expenses/new">
            <span class="oi oi-plus"></span>
        </a>
    </Toolbar>
    <Content>
        @if (model.Items.Count() == 0)
        {
            <h4>@Localizer[nameof(Resources.Pages.Expenses.NoExpensesMessage)]</h4>
        }
        else
        {
            <div class="row">
                @foreach (var item in model.Items)
                {
                    <div class="col-md-4 mb-2">
                        <ListItem Title="@item.Title">
                            <Actions>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-m btn-outline-primary" @onclick="@(() => OpenExpenseDetail(item))">View</button>
                                    <button type="button" class="btn btn-m btn-danger" @onclick="@(() => DeleteExpense(item))">Delete</button>
                                </div>
                            </Actions>
                            <ChildContent>
                                <dl>
                                    <dt>@Localizer[nameof(Resources.Pages.Expenses.DateLabel)]</dt>
                                    <dd>@item.ExpenseDate.ToShortDateString()</dd>
                                    <dt>@Localizer[nameof(Resources.Pages.Expenses.TotalAmountLabel)]</dt>
                                    <dd>@item.TotalAmount.ToString("### ###.00 €")</dd>
                                </dl>
                            </ChildContent>
                        </ListItem>
                    </div>
                }
            </div>
        }
    </Content>
</PageLayout>

<Confirm ModalId="@deleteExpenseModalId"
         Title="Eliminazione spesa"
         Content="@($"Stai per cancellare la spesa {selectedItem?.Title}. Sei sicuro?")"
         OnConfirm="DeleteExpenseConfirmed" />

@code {
    private ExpensesListModel model = new();

    private ExpensesListModel.ExpenseListItemModel? selectedItem = null;
    private string deleteExpenseModalId = "deleteExpense";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadExpensesAsync();
    }

    private async Task LoadExpensesAsync() => model = await Service.GetExpensesAsync();

    async Task DeleteExpense(ExpensesListModel.ExpenseListItemModel expense)
    {
        this.selectedItem = expense;
        await Js.InvokeVoidAsync("showModal", deleteExpenseModalId);
    }

    void OpenExpenseDetail(ExpensesListModel.ExpenseListItemModel expense)
    {
        Navigation.NavigateTo($"expenses/{expense.Id}");
    }

    private async Task DeleteExpenseConfirmed()
    {
        try
        {
            await Service.DeleteExpenseAsync(selectedItem!);
            await Js.InvokeVoidAsync("alert", "Elemento cancellato con successo!");

            await LoadExpensesAsync();
        }
        catch (Exception ex)
        {
            await Js.InvokeVoidAsync("alert", $"Si è verificato un errore durante la cancellazione. {ex.Message}");
        }
        finally
        {
            await Js.InvokeVoidAsync("hideModal", deleteExpenseModalId);
            this.selectedItem = null;
        }
    }
}
