@page "/expenses"

@inject ExpensesService Service
@inject IStringLocalizer<Resources.Pages.Expenses> Localizer
@inject IJSRuntime Js
@inject NavigationManager Navigation

@attribute [Authorize]

<PageTitle>@Localizer[nameof(Resources.Pages.Expenses.ExpensesPageTitle)]</PageTitle>

<h3>@Localizer[nameof(Resources.Pages.Expenses.ExpensesPageTitle)]</h3>

@if (model.Items.Count() == 0)
{
    <h4>@Localizer[nameof(Resources.Pages.Expenses.NoExpensesMessage)]</h4>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>@Localizer[nameof(Resources.Pages.Expenses.TitleLabel)]</th>
                <th>@Localizer[nameof(Resources.Pages.Expenses.DateLabel)]</th>
                <th>@Localizer[nameof(Resources.Pages.Expenses.TotalAmountLabel)]</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in model.Items)
            {
                <tr>
                    <td>@item.Title</td>
                    <td>@item.ExpenseDate.ToShortDateString()</td>
                    <td>@item.TotalAmount.ToString("C2")</td>
                    <td>
                        <div class="btn-group">
                            <button type="button" class="btn btn-outline-primary" @onclick="@(() => OpenExpenseDetail(item))">View</button>
                            <button type="button" class="btn btn-danger" @onclick="@(() => DeleteExpense(item))">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ExpensesListModel model = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadExpensesAsync();
    }

    private async Task LoadExpensesAsync() => model = await Service.GetExpensesAsync();

    async Task DeleteExpense(ExpensesListModel.ExpenseListItemModel expense)
    {
        if (await Js.InvokeAsync<bool>("confirm", $"Stai per cancellare la spesa {expense.Title}. Sei sicuro?"))
        {
            try
            {
                await Service.DeleteExpenseAsync(expense);
                await Js.InvokeVoidAsync("alert", "Elemento cancellato con successo!");

                await LoadExpensesAsync();
            }
            catch (Exception ex)
            {
                await Js.InvokeVoidAsync("alert", $"Si è verificato un errore durante la cancellazione. {ex.Message}");
            }
        }
    }

    void OpenExpenseDetail(ExpensesListModel.ExpenseListItemModel expense)
    {
        Navigation.NavigateTo($"expenses/{expense.Id}");
    }
}
